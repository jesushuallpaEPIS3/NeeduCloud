/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2024-05-03 17:52:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.web;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Map;
import Modelo.Oportunidad;
import java.util.List;
import ModeloDAO.OportunidadDAO;

public final class InfoOportunidad_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("ModeloDAO.OportunidadDAO");
    _jspx_imports_classes.add("Modelo.Oportunidad");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"estilos_InfoOportunidad.css\">\r\n        <title>JSP Page</title>\r\n    </head>\r\n    <body>\r\n    <div id=\"navbar\">\r\n        <div class=\"logo\">NGO Volunteer</div>\r\n        <div class=\"menu-icon\" onclick=\"toggleMenu()\">\r\n            <img src=\"imagenes/menuU.png\" alt=\"Menú\">\r\n        </div>\r\n        <div class=\"links\">\r\n            <a href=\"ControladorLogin?accion=redirigirInicio\">Inicio</a>\r\n            <a href=\"ControladorPerfil?accion=perfil\">Perfil</a>\r\n            <a href=\"ControladorLogin?accion=logout\">Cerrar Sesión</a>\r\n        </div>\r\n    </div>\r\n\r\n    <div id=\"menu-options\" class=\"menu-options\">\r\n        <ul>\r\n            <li><a href=\"Sobre_Nosotros.jsp\">Por qué ser voluntario</a></li>\r\n            <li><a href=\"ControladorLogin?accion=loginusuario\">Inicio de Sesión</a></li>\r\n            <li><a href=\"ControladorRegistro?accion=registro\" class=\"registro-btn\">Regístrate</a></li>\r\n");
      out.write("        </ul>\r\n    </div>\r\n        \r\n        \r\n    <div class=\"imagen-oportunidad\">\r\n        <img src=\"imagenes/imaGenerico.png\" alt=\"Imagen de la Oportunidad\">\r\n    </div>\r\n\r\n<div class=\"info-oportunidad\">\r\n    ");

        Oportunidad oportunidad = (Oportunidad) request.getAttribute("oportunidad");
        if (oportunidad != null) {
    
      out.write("\r\n        <h1>");
      out.print( oportunidad.getTitulo() );
      out.write("</h1>\r\n        <p><strong>Descripción:</strong> ");
      out.print( oportunidad.getDescripcion() );
      out.write("</p>\r\n        <p><strong>Fecha:</strong> ");
      out.print( oportunidad.getFecha() );
      out.write("</p>\r\n        <p><strong>ID Ubicación:</strong> ");
      out.print( oportunidad.getIdubicacion() );
      out.write("</p>\r\n        <p><strong>ID Organización:</strong> ");
      out.print( oportunidad.getIdorganizacion() );
      out.write("</p>\r\n        <p><strong>ID Causa:</strong> ");
      out.print( oportunidad.getIdcausa() );
      out.write("</p>\r\n        <p><strong>Estado:</strong> ");
      out.print( oportunidad.getEstado() == 1 ? "Activo" : "Inactivo" );
      out.write("</p>\r\n\r\n        <form action=\"ControladorOportunidad\" method=\"post\">\r\n            <input type=\"hidden\" name=\"accion\" value=\"unirse\">\r\n            <input type=\"hidden\" name=\"idoportunidad\" value=\"");
      out.print( oportunidad.getIdoportunidad() );
      out.write("\">\r\n            <button type=\"submit\">Unirse a esta Oportunidad</button>\r\n        </form>\r\n    ");

        } else {
            out.println("<p>Oportunidad no encontrada.</p>");
        }
    
      out.write("\r\n</div>\r\n\r\n\r\n    <!-- Botón para Ser Voluntario -->\r\n    <div class=\"boton-voluntario\">\r\n        <form onsubmit=\"enviarSolicitud(event, idOportunidad);\" class=\"form-oportunidad\">\r\n            <button type='submit' class=\"btn-oportunidad\">Ser Voluntario</button>\r\n        </form>\r\n    </div>   \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        <script>\r\n        function toggleMenu() {\r\n            var menuOptions = document.getElementById(\"menu-options\");\r\n            if (menuOptions.style.display === \"none\" || menuOptions.style.display === \"\") {\r\n                menuOptions.style.display = \"block\";\r\n                setTimeout(function() {\r\n                    menuOptions.classList.add(\"active\");\r\n                }, 0);\r\n            } else {\r\n                menuOptions.classList.remove(\"active\"); // Retira la clase \"active\" para ocultar el menú\r\n                setTimeout(function() {\r\n                    menuOptions.style.display = \"none\"; // Oculta el menú después de que se retire la animación\r\n");
      out.write("                }, 500); // Agrega un retraso para que la animación termine antes de ocultar el menú\r\n            }\r\n        }\r\n\r\n        // Función para cerrar el menú cuando cambia el tamaño de la ventana\r\n        function closeMenuOnResize() {\r\n            var menuOptions = document.getElementById(\"menu-options\");\r\n            if (menuOptions.classList.contains('active')) {\r\n                menuOptions.classList.remove('active');\r\n                setTimeout(function() {\r\n                    menuOptions.style.display = \"none\";\r\n                }, 500);\r\n            }\r\n        }\r\n\r\n        // Agregar un controlador de eventos al evento 'resize' para detectar cambios de tamaño de ventana\r\n        window.addEventListener('resize', closeMenuOnResize);\r\n    </script>\r\n    \r\n    \r\n    \r\n        <script>\r\n    function enviarSolicitud(event, idOportunidad) {\r\n        event.preventDefault(); // Detiene el comportamiento de envío del formulario\r\n\r\n        fetch('ControladorSolicitud?idoportunidad=' + idOportunidad)\r\n        .then(response => response.json())\r\n");
      out.write("        .then(data => {\r\n            if (data.success) {\r\n                alert(data.message);\r\n            } else {\r\n                alert(data.message);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n            alert('Datos enviados correctamente.');\r\n        });\r\n    }\r\n    </script>\r\n    \r\n    \r\n    </body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
