/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2024-05-03 17:52:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.web.Usuario;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import Modelo.Control;
import java.util.List;
import ModeloDAO.ControlDAO;

public final class control_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ModeloDAO.ControlDAO");
    _jspx_imports_classes.add("Modelo.Control");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n<title>Needu</title>\r\n<style>\r\n    /* Estilos para el botón \"Generar Informe\" */\r\n.btn {\r\n    display: inline-block;\r\n    padding: 10px 20px;\r\n    margin-bottom: 20px;\r\n    text-decoration: none;\r\n    background-color: #fff; /* Fondo blanco */\r\n    color: #000; /* Letras negras */\r\n    border: 2px solid #000; /* Borde negro */\r\n    border-radius: 5px;\r\n    transition: background-color 0.3s ease, color 0.3s ease;\r\n    font-weight: bold;\r\n}\r\n\r\n.btn:hover {\r\n    background-color: #f5f5f5; /* Color de fondo al pasar el cursor */\r\n}\r\n\r\n\r\n/* Estilos para las tablas de registros */\r\n.registro-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.registro-table th, .registro-table td {\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    text-align: left;\r\n}\r\n\r\n.registro-table th {\r\n    background-color: #f2f2f2;\r\n    font-weight: bold;\r\n}\r\n\r\n.registro-table tr:hover {\r\n    background-color: #f5f5f5;\r\n}\r\n/* Estilos para la barra de menú */\r\n.menu {\r\n  background-color: #ffffff; /* Fondo blanco */\r\n");
      out.write("  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Sombra ligera */\r\n  padding: 10px 20px; /* Espaciado interno */\r\n  text-align: right; /* Alineación del texto a la derecha */\r\n}\r\n\r\n.menu a {\r\n  font-family: Helvetica, Arial, sans-serif; /* Fuentes de sistema similares a Poppins */\r\n  text-decoration: none; /* Sin subrayado en los enlaces */\r\n  color: #666; /* Color de texto gris */\r\n  margin-right: 50px; /* Espaciado entre elementos */\r\n  font-weight: bold; /* Texto en negrita */\r\n}\r\n\r\n.menu a:hover {\r\n  color: #333; /* Cambio de color al pasar el ratón por encima */\r\n}\r\n\r\n</style>\r\n<link rel=\"icon\" type=\"image/jpeg\" href=\"imagenes\\logo.jpeg\"> \r\n<!-- Lógica de Java para obtener las listas -->\r\n");

// Obtener listas del request
List<Control> registrosUsuario = (List<Control>) request.getAttribute("registrosUsuario");
List<Control> todosRegistros = (List<Control>) request.getAttribute("todosRegistros");

// Verificar si las listas no están vacías
if (registrosUsuario != null && todosRegistros != null) {

      out.write("\r\n\r\n");

    // Convertir la lista de registros a una cadena de consulta para enviarla en la URL
    String listaQueryString = "";
    if (registrosUsuario != null && !registrosUsuario.isEmpty()) {
        StringBuilder stringBuilder = new StringBuilder();
        for (Control control : registrosUsuario) {
            stringBuilder.append("idcontrol=").append(control.getIdcontrol()).append("&");
            stringBuilder.append("idusuario=").append(control.getIdusuario()).append("&");
            stringBuilder.append("usuario=").append(control.getUsuario()).append("&");
            stringBuilder.append("hora_entrada=").append(control.getHora_entrada()).append("&");
            stringBuilder.append("hora_salida=").append(control.getHora_salida()).append("&");
        }
        listaQueryString = stringBuilder.toString();
        listaQueryString = listaQueryString.substring(0, listaQueryString.length() - 1); // Eliminar el último '&'
    }

      out.write("\r\n<div class=\"menu\">\r\n  <a href=\"ControladorLogin?accion=redirigirInicio\">Inicio</a>\r\n  <a href=\"ControladorChat?accion=allchats\">Chat</a>\r\n  <a href=\"ControladorNotificacion?accion=notificacion\">Notificaciones</a>\r\n  <a href=\"ControladorPerfil?accion=perfil\">Perfil</a>\r\n  <a href=\"ControladorUsuario?accion=control\">Control de usuarios</a>\r\n  <a href=\"ControladorLogin?accion=logout\">Cerrar Sesión</a>\r\n</div>\r\n<a href=\"ControladorAdmin?accion=generarInforme\" class=\"btn\">Generar Informe</a>\r\n\r\n<h2>Registros del usuario actual:</h2>\r\n<table class=\"registro-table\">\r\n    <tr>\r\n        <th>ID Control</th>\r\n        <th>ID Usuario</th>\r\n        <th>Usuario</th>\r\n        <th>Hora de entrada</th>\r\n        <th>Hora de salida</th>\r\n    </tr>\r\n    ");
 for (Control control : registrosUsuario) { 
      out.write("\r\n    <tr>\r\n        <td>");
      out.print( control.getIdcontrol() );
      out.write("</td>\r\n        <td>");
      out.print( control.getIdusuario() );
      out.write("</td>\r\n        <td>");
      out.print( control.getUsuario() );
      out.write("</td>\r\n        <td>");
      out.print( control.getHora_entrada() );
      out.write("</td>\r\n        <td>");
      out.print( control.getHora_salida() );
      out.write("</td>\r\n    </tr>\r\n    ");
 } 
      out.write("\r\n</table>\r\n\r\n<!-- HTML/JSP para mostrar la lista de todos los registros -->\r\n<h2>Todos los registros:</h2>\r\n<table class=\"registro-table\">\r\n    <tr>\r\n        <th>ID Control</th>\r\n        <th>ID Usuario</th>\r\n        <th>Usuario</th>\r\n        <th>Hora de entrada</th>\r\n        <th>Hora de salida</th>\r\n    </tr>\r\n    ");
 for (Control control : todosRegistros) { 
      out.write("\r\n    <tr>\r\n        <td>");
      out.print( control.getIdcontrol() );
      out.write("</td>\r\n        <td>");
      out.print( control.getIdusuario() );
      out.write("</td>\r\n        <td>");
      out.print( control.getUsuario() );
      out.write("</td>\r\n        <td>");
      out.print( control.getHora_entrada() );
      out.write("</td>\r\n        <td>");
      out.print( control.getHora_salida() );
      out.write("</td>\r\n    </tr>\r\n    ");
 } 
      out.write("\r\n</table>\r\n\r\n");

} else {
    out.println("No se han encontrado registros.");
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
